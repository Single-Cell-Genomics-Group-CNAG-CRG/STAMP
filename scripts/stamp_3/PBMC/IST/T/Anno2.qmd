---
title: "T subset annotation - Stamp 3 PBMCs"
date: "`r Sys.Date()`"
format: 
  html:
    theme: superhero
    smooth-scroll: true
    code-fold: true
    self-contained: true
    toc: true
    toc_float: 
      collapsed: false
      smooth_scroll: true
editor: source
editor_options: 
  chunk_output_type: console
execute:
  echo: true
  fig-width: 15     
  fig-height: 5 
---

### Libraries

```{r}
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(tidyverse)
library(dplyr)
library(here)
library(scater)
library(scuttle)
library(glue)
library(qs)
library(scran)
library(data.table)
library(ComplexHeatmap)
library(circlize)
})
```

```{r}
dir <- glue("{here()}")
source(glue("{dir}/scripts/misc/paths.R"))
source(glue("{dir}/scripts/misc/BIN.R"))
```

### Data loading

```{r}
stamp <- "stamp_3"
sample <- "PBMCs"
sub <- "T"
res_dir <- glue("{proj_dir}/data/{stamp}/{sample}/Ist/{sub}")
sce <- qread(glue("{res_dir}/PreProcNew.qs"), nthreads = 8)
unsup <- qread(glue("{res_dir}/unsup.qs"))
```

### QC on Unsup clustering (removed for the moment)

Cells with clustering probability \< 0.7 will be set to unassigned

```{r}
sce$clust <- unsup$clust
sce$prob <- unsup$prob
#sce$clust[sce$prob < 0.7] <- "Unassigned"
```

```{r}
pal <- palette_general()
length(pal) <- length(unique(sce$clust))
names(pal) <- unique(sce$clust)
```

## Extract reference profiles from IST

Normalize & log-transform the profiles

```{r}
norm <- unsup$profiles /  Matrix::colSums(unsup$profiles) # normalize
lognorm <- log1p(norm) # log transform
```

Calculate logFC

```{r}
result <- lognorm 
for (i in 1:nrow(lognorm)) {
  for (j in 1:ncol(lognorm)) {
    result[i, j] <- log1p(lognorm[i, j] / mean(lognorm[i, -j]))
  }
}
```

Take first 10 features for each cluster by logFC

```{r}
feat <- unique(as.vector(unlist(apply(result, 2, function(column) {
  names(sort(column, decreasing = TRUE))[1:10]
}))))
```

### 1. HeatMap

Prepare the matrix & remove outliers at 2.5 sd for better visualization

```{r}
x <- result[feat,]

z <- \(x, th=2) {
    if (is.null(dim(x))) {
        x[x < 0] <- 0
        sd <- sd(x, na.rm=TRUE)
        x <- x-mean(x, na.rm=TRUE)
        if (sd != 0) x <- x/sd
    } else {
        mus <- colMeans(x)
        sds <- colSds(x)
        x <- sweep(x, 2, mus, `-`)
        x <- sweep(x, 2, sds, `/`)
    }
    x[x > +th] <- +th
    x[x < -th] <- -th
    return(x)
}
mtx_scaled <- z(x)
```

Plot

```{r}
# Perform hierarchical clustering on euclidean distance matrix with "average" method
column_dist_euclidean <- dist(mtx_scaled, method = "euclidean")
column_hclust_complete <- hclust(column_dist_euclidean, method = "average")

# Create the heatmap with reduced height
color_function <- colorRamp2(c(min(mtx_scaled), 0, max(mtx_scaled)), c("navy", "white", "red"))
hm <- Heatmap(t(mtx_scaled),
              name = "expression",
              cluster_rows = FALSE,
              cluster_columns = as.dendrogram(column_hclust_complete),
              show_row_names = TRUE,
              show_column_names = TRUE,
              show_row_dend = FALSE,
              show_column_dend = FALSE,
              col = color_function,
              row_names_side = "left",
           #  height = unit(4,"cm"),
              column_names_gp = gpar(fontsize = 8),
              row_order = match(c("a","b","g","c","d","f","e"), rownames(t(mtx_scaled))))
hm
```

### 2. Proportions & UMAP

```{r}
palette_general <- function(){
  set.seed(1234) # for reproducibility
  color_palette <- Polychrome::createPalette(25, c("#fc6060", "#74f774", "#7c7cfc"))
  return(unname(color_palette))
}
pal <- palette_general()
names(pal) <- unique(sce$clust)
```

```{r}
gg_combined_clust <- create_plots3(sce, "clust", feat, pal)
gg_combined_clust
```

### 3. Quality metrics

```{r}
df <- as.data.frame(colData(sce))
gg_dens_clust <- wrap_plots(
                  plot_density(df, "sum", "clust", pal, "nCounts",500),
                  plot_density(df, "detected", "clust", pal, "nFeatures",300),
                  plot_density(df, "Area.um2", "clust", pal, "Area",500),
                  ncol =2)
gg_dens_clust
```

## Annotation

```{r}
#sce$lvl2[sce$clust == "Unassigned"] <- "Unassigned"
sce$lvl2[sce$clust == "a"] <- "NK"
sce$lvl2[sce$clust == "b"] <- "GZMB+ CD8"
sce$lvl2[sce$clust == "g"] <- "GZMK+ CD8"
sce$lvl2[sce$clust == "c"] <- "Th"
sce$lvl2[sce$clust == "d"] <- "Naive CD8"
sce$lvl2[sce$clust == "f"] <- "Naive CD4"
sce$lvl2[sce$clust == "e"] <- "LowQ"
```

```{r}
# Create a named vector where names are the cluster identifiers and values are the corresponding lvl2 labels
clust_to_lvl2 <- (setNames(unique(sce$lvl2), unique(sce$clust)))
# Match and rename the column names of mtx_scaled based on this mapping
colnames(mtx_scaled) <- clust_to_lvl2[colnames(mtx_scaled)]

hm <- Heatmap(t(mtx_scaled),
                       name = "expression",
                       cluster_rows = FALSE,
                       cluster_columns = as.dendrogram(column_hclust_complete),
                       show_row_names = TRUE,
                       show_column_names = TRUE,
                       show_row_dend = FALSE,
                       show_column_dend = FALSE,
                       col = color_function,
                       row_names_side = "left",
                     #  height = unit(4,"cm"),
                       column_names_gp = gpar(fontsize = 8),
                       row_order = match(c("NK","GZMB+ CD8","GZMK+ CD8","Th",
                                           "Naive CD8","Naive CD4","LowQ"), 
                                         rownames(t(mtx_scaled))))
hm
```

```{r}
pal <- palette_general()
names(pal) <- unique(sce$lvl2)
gg_combined <- create_plots3(sce, "lvl2", feat, pal)
gg_combined
```

```{r}
df <- as.data.frame(colData(sce))
gg_density <- wrap_plots(
                plot_density(df, "sum", "lvl2", pal, "nCounts",500),
                plot_density(df, "detected", "lvl2", pal, "nFeatures",500),
                plot_density(df, "Area.um2", "lvl2", pal, "Area",500),
                ncol =2)
gg_density
```

#### Save

```{r}
dir <- glue("{plt_dir}/{stamp}/{sample}")
pdf(glue("{dir}/Ist/Lvl1.pdf"), width = 15, height = 8)
gg_combined_clust
gg_dens_clust
gg_combined
gg_density
dev.off()
```

```{r}
qsave(sce, glue("{res_dir}/sce_ist2.qs"), nthreads = 8)
```
