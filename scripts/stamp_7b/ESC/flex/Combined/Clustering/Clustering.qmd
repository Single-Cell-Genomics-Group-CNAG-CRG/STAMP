---
title: "Clustering - Flex - Stamp 7b - Combined"
subtitle: "Emanuele Pitino"
date: "`r Sys.Date()`"
format: 
  html:
    theme: superhero
    smooth-scroll: true
    code-fold: true
    self-contained: true
    toc: true
    toc_float: 
      collapsed: false
      smooth_scroll: true
editor: source
editor_options: 
  chunk_output_type: console
execute:
  echo: true
  fig-width: 9     
  fig-height: 6 
---

In this notebook we will cluster the combined and integrated object containing iESCs + BMP4 at different timepoints.

## Setup
### Libraries
```{r}
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(dplyr)
library(here)
library(scater)
library(scuttle)
library(scran)
library(glue)
library(qs)
library(scales)
library(bluster)
})
```

### Paths
```{r}
dir <- glue("{here()}")
source(glue("{dir}/scripts/misc/paths.R"))
source(glue("{dir}/scripts/misc/BIN.R"))

sample <- "combined"
stamp <- "Stamp_7b"
dir <- glue("{here()}")
source(glue("{dir}/scripts/misc/paths.R"))
source(glue("{dir}/scripts/misc/BIN.R"))
```

### Load data
```{r}
base_dir <- glue("{proj_dir}/data/{stamp}/processed/flex/{sample}")
sce <- qread(glue("{base_dir}/integrated_sce.qs"), nthreads = 8)
sce
```


# Clustering

## Build snn graph
```{r}
snn <- buildSNNGraph(sce, type = "jaccard", use.dimred="HARMONY", BPPARAM = bp)
```

## Run louvain 
```{r}
clusters <- igraph::cluster_louvain(snn, resolution = 1)
```

```{r}
sce$label <- as.character(clusters$membership) # assign labels
pal <- Polychrome::createPalette(n_distinct(sce$label), c("#FBB4AE", "#B3CDE3", "#CCEBC5"))
names(pal) <- unique(sce$label)
```


## Clusters in integrated PCA
```{r}
df <- as.data.frame(colData(sce)) # cd
pca <- reducedDim(sce,"HARMONY") # pc
df <- cbind(df,pca) # merge
df <- df[sample(nrow(df)), ] # shuffle

df$label <- factor(df$label, levels = sort(unique(as.numeric(df$label)), decreasing = F))

ggplot(df, aes(x = HARMONY_1, y = HARMONY_2, color = label)) +
  ggrastr::rasterise(geom_point(shape = 16, size = 0.1), dpi = 1000) +
  scale_color_manual(values = pal) +
  theme_bw() +
  theme(
    text = element_text(size = 25, color = "black"),
    axis.text = element_text(size = 20, color = "black"),
    legend.text = element_text(size = 12),
    legend.title = element_text(size = 18),
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank()   # Remove minor grid lines
  ) +
  guides(color = guide_legend(override.aes = list(size = 3))) +
  labs(x = "HARMONY_1", y = "HARMONY_1", color = "Cluster") +
  coord_equal()
```

## Clusters in Umap
```{r, fig.width= 8, fig.height= 5}
df <- as.data.frame(colData(sce))
um <- reducedDim(sce,"UMAP_integ")
df <- cbind(df,um)
df <- df[sample(nrow(df)), ]

df$label <- factor(df$label, levels = sort(as.numeric(unique(df$label))))

ggplot(df, aes(x = UMAP1, y = UMAP2, color = label)) +
  ggrastr::rasterise(geom_point(shape = 16, size = 0.1), dpi = 1000) +
  scale_color_manual(values = pal) +
  theme_bw() +
  theme(
    text = element_text(size = 15, color = "black"),
    axis.text = element_text(size = 10, color = "black"),
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank()   # Remove minor grid lines
  ) +
  guides(color = guide_legend(override.aes = list(size = 3))) +
  labs(x = "", y = "", color = "Cluster")
```

## Clusters numbers

```{r}
df <- as.data.frame(colData(sce))
df <- as.data.frame(table(df$label))  %>%
        mutate(pct = round(Freq/sum(Freq),2))
df$Var1 <- factor(df$Var1, levels = df$Var1[order(-df$Freq)])

ggplot(df, aes(x = Var1, y = Freq, fill = Var1)) + 
  geom_col() + 
  geom_text(aes(label = Freq), vjust = -0.5, size = 3) +
  scale_fill_manual(values = pal) + 
  theme_bw() +
  theme(text = element_text(size = 15, color = "black"),
        axis.text = element_text(size = 10, color = "black")) +
  labs(x = "Cluster", y = "nCells", fill = "Cluster")
```

## Clusters proportions per sample
```{r}
df <- as.data.frame(table(sce$sample,sce$label)) %>%
      group_by(Var1) %>%
      mutate(Proportion = round((Freq / sum(Freq)) * 100, 2))

df$Var1 <- factor(df$Var1, levels = c("iESC_0h","iESC_6h","iESC_12h","iESC_24h","iESC_48h","iESC_72h","iESC_96h","iESC_120h"))
ggplot(df, aes( x = Var1 , y = Proportion, fill = Var2)) + 
  geom_col() +
  scale_fill_manual(values = pal) +
  theme_bw() +
  theme(text = element_text(size = 15, color = "black"),
        axis.text = element_text(size = 15, color = "black"),
        panel.grid = element_blank()) +
  labs(x = "Sample", fill = "Cluster")
```

## QC metrics per cluster

```{r}
df <- as.data.frame(colData(sce))

# reorder by mean ncount
df$label <- factor(df$label, levels = df %>% 
  group_by(label) %>% 
  summarise(mean_sum = mean(sum)) %>% 
  arrange(-mean_sum) %>% 
  pull(label))

# Create the plot
ggplot(df, aes(x = label, y = sum)) + 
  geom_jitter(shape = 16, alpha = 0.8, size = 0.8, aes(color = log(detected))) +
  geom_boxplot(alpha = 0.8, outlier.shape = NA, fill = NA) +
  scale_color_viridis_c() +
  scale_y_log10() +
  labs(x = "Cluster", y = "nCount", color = "Log(nFeature)") + 
  theme_bw() +
  theme(text = element_text(size = 15, color = "black"),
        axis.text = element_text(size = 10, color = "black"),
        panel.grid = element_blank())
```


## nFeature/nCount
```{r}
df <- as.data.frame(colData(sce))

ndbl <- sum(df$scDblFinder.class == "doublet")
nsgl <- sum(df$scDblFinder.class == "singlet")

pctdbl <- round(ndbl/(ndbl+nsgl)*100,2)

df <- df[sample(rownames(df)),]
ggplot(df, aes(x = detected, y = sum, color = scDblFinder.class)) +
  geom_point(shape = 16, size = 0.4) +
  scale_color_manual(values = c("singlet" = "green4", "doublet" = "red4")) +
            labs(subtitle = glue("Doublets: {pctdbl}%") ,x = "nFeature", y = "nCount", color = "scDblFinder", title = "nFeat vs nCount") + 
            theme_bw() +
            theme(text = element_text(size = 15, color = "black"),
                  axis.text = element_text(size = 10, color = "black")) +
            guides(color = guide_legend(override.aes = list(size = 3)))
```

## Doublets per cluster
```{r}
df <- as.data.frame(colData(sce))
df <- as.data.frame(table(df$label, df$scDblFinder.class))

# Calculate the percentage and reorder by 'singlet' percentage
df <- df %>%
  group_by(Var1) %>%
  mutate(pct = round(Freq / sum(Freq), 2)) %>%
  ungroup()

# Calculate the percentage of 'singlets' for reordering
singlet_pct <- df %>% 
  filter(Var2 == "singlet") %>% 
  select(Var1, pct)

# Reorder Var1 by the percentage of 'singlets'
df$Var1 <- factor(df$Var1, levels = singlet_pct$Var1[order(singlet_pct$pct, decreasing = TRUE)])

# Make Var2 a factor to control the order in the legend and plot
df$Var2 <- factor(df$Var2, levels = c("doublet", "singlet"))

# Create the plot
ggplot(df, aes(x = Var1, y = pct, fill = Var2)) +
  scale_fill_manual(values = c("singlet" = "green4", "doublet" = "red4")) +
  geom_col(position = "stack") + 
  labs(x = "Cluster", y = "Proportion", fill = "scDblFinder", title = "Doublets % per Cluster") + 
  theme_bw() +
  theme(text = element_text(size = 15, color = "black"),
        axis.text = element_text(size = 10, color = "black")) + 
  guides(color = guide_legend(override.aes = list(size = 3)))
```

# Save data
```{r}
outdir <- glue("{proj_dir}/data/{stamp}/processed/flex/{sample}")
dir.create(outdir, showWarnings = F, recursive = T)
qsave(sce, glue("{outdir}/clust_sce.qs"), nthreads = 8)
```