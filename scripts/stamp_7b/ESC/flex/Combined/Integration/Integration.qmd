---
title: "Integration for batch effect - Flex - Stamp 7b - Combined"
subtitle: "Emanuele Pitino"
date: "`r Sys.Date()`"
format: 
  html:
    theme: superhero
    smooth-scroll: true
    code-fold: true
    self-contained: true
    toc: true
    toc_float: 
      collapsed: false
      smooth_scroll: true
editor: source
editor_options: 
  chunk_output_type: console
execute:
  echo: true
  fig-width: 12     
  fig-height: 9 
---
In this script we will continue the analysis of the stamp_7b combined object by integrating with Harmony

## Setup
### Libraries
```{r}
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(dplyr)
library(here)
library(scater)
library(scuttle)
library(scran)
library(glue)
library(qs)
library(scales)
library(bluster)
})
```

### Paths
```{r}
dir <- glue("{here()}")
source(glue("{dir}/scripts/misc/paths.R"))
source(glue("{dir}/scripts/misc/BIN.R"))

sample <- "combined"
stamp <- "Stamp_7b"
dir <- glue("{here()}")
source(glue("{dir}/scripts/misc/paths.R"))
source(glue("{dir}/scripts/misc/BIN.R"))
```

### Load data
```{r}
base_dir <- glue("{proj_dir}/data/{stamp}/processed/flex/{sample}")
sce <- qread(glue("{base_dir}/proc_sce.qs"), nthreads = 8)
sce
```

# Visualize batch effect

## PCA
```{r}
df <- as.data.frame(colData(sce))
um <- reducedDim(sce,"PCA")
df <- cbind(df,um)
df <- df[sample(nrow(df)), ]

pal <- Polychrome::createPalette(n_distinct(sce$sample), c("#fc6060", "#74f774", "#7c7cfc")) # palette
names(pal) <- unique(sce$sample)

ggplot(df, aes(x = PC1, y = PC2, color = sample)) +
  ggrastr::rasterise(geom_point(shape = 16, size = 0.1), dpi = 1000) +
  scale_color_manual(values = pal) +
  theme_bw() +
  theme(
    text = element_text(size = 15, color = "black"),
    axis.text = element_text(size = 10, color = "black"),
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank()   # Remove minor grid lines
  ) +
  guides(color = guide_legend(override.aes = list(size = 3))) +
  labs(x = "umap1", y = "umap2", color = "Sample")
```

## UMAP

```{r}
df <- as.data.frame(colData(sce))
um <- reducedDim(sce,"UMAP")
df <- cbind(df,um)
df <- df[sample(nrow(df)), ]

ggplot(df, aes(x = UMAP1, y = UMAP2, color = sample)) +
  ggrastr::rasterise(geom_point(shape = 16, size = 0.1), dpi = 1000) +
  scale_color_manual(values = pal) +
  theme_bw() +
  theme(
    text = element_text(size = 15, color = "black"),
    axis.text = element_text(size = 10, color = "black"),
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank()   # Remove minor grid lines
  ) +
  guides(color = guide_legend(override.aes = list(size = 3))) +
  labs(x = "umap1", y = "umap2", color = "Sample")
```


# Run Harmony

```{r}
sce <- RunHarmony(
        sce,
        group.by.vars = "sample",
        dims.use = 1:10,
        verbose = TRUE,
        reduction.save = "HARMONY",
        ncores = 8
)
```

# Run UMAP on integrated PCA
```{r}
sce <- runUMAP(sce, dimred = "HARMONY", name = "UMAP_integ")
```


# Check integration

## PCA
```{r}
df <- as.data.frame(colData(sce))
um <- reducedDim(sce,"HARMONY")
df <- cbind(df,um)
df <- df[sample(nrow(df)), ]

ggplot(df, aes(x = HARMONY_1, y = HARMONY_2, color = sample)) +
  ggrastr::rasterise(geom_point(shape = 16, size = 0.1), dpi = 1000) +
  scale_color_manual(values = pal) +
  theme_bw() +
  theme(
    text = element_text(size = 15, color = "black"),
    axis.text = element_text(size = 10, color = "black"),
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank()   # Remove minor grid lines
  ) +
  guides(color = guide_legend(override.aes = list(size = 3))) +
  labs(x = "harmony_1", y = "harmony_2", color = "Sample")
```

## UMAP
```{r}
df <- as.data.frame(colData(sce))
um <- reducedDim(sce,"UMAP_integ")
df <- cbind(df,um)
df <- df[sample(nrow(df)), ]

ggplot(df, aes(x = UMAP1, y = UMAP2, color = sample)) +
  ggrastr::rasterise(geom_point(shape = 16, size = 0.1), dpi = 1000) +
  scale_color_manual(values = pal) +
  theme_bw() +
  theme(
    text = element_text(size = 15, color = "black"),
    axis.text = element_text(size = 10, color = "black"),
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank()   # Remove minor grid lines
  ) +
  guides(color = guide_legend(override.aes = list(size = 3))) +
  labs(x = "umap_1", y = "umap_2", color = "Sample")
```

## Doublets Umap
```{r, fig.width= 12, fig.height= 5}
ggplot(df, aes(x = UMAP1, y = UMAP2, color = scDblFinder.class)) +
  ggrastr::rasterise(geom_point(shape = 16, size = 0.1), dpi = 1000) +
  theme_bw() +
  scale_color_manual(values = c("singlet" = "darkgrey", "doublet" = "red4")) +
  theme(
    text = element_text(size = 15, color = "black"),
    axis.text = element_text(size = 10, color = "black"),
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank()   # Remove minor grid lines
  ) +
  guides(color = guide_legend(override.aes = list(size = 3))) +
  labs(x = "umap_1", y = "umap_2", color = "scDblFinder")
```

# Save data
```{r}
outdir <- glue("{proj_dir}/data/{stamp}/processed/flex/{sample}")
dir.create(outdir, showWarnings = F, recursive = T)
qsave(sce, glue("{outdir}/integrated_sce.qs"), nthreads = 8)
```