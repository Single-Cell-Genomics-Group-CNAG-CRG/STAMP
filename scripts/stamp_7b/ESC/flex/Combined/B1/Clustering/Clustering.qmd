---
title: "Clustering - Flex - Stamp 7b - B1"
subtitle: "Emanuele Pitino"
date: "`r Sys.Date()`"
format: 
  html:
    theme: superhero
    smooth-scroll: true
    code-fold: true
    self-contained: true
    toc: true
    toc_float: 
      collapsed: false
      smooth_scroll: true
editor: source
editor_options: 
  chunk_output_type: console
execute:
  echo: true
  fig-width: 12     
  fig-height: 9 
---

## Setup
### Libraries
```{r}
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(dplyr)
library(here)
library(scater)
library(scuttle)
library(scran)
library(glue)
library(qs)
library(scales)
library(bluster)
})
```

### Paths
```{r}
dir <- glue("{here()}")
source(glue("{dir}/scripts/misc/paths.R"))
source(glue("{dir}/scripts/misc/BIN.R"))

sample <- "B1"
#sample <- "iESC_0h"
stamp <- "Stamp_7b"
#npcs <- params$npcs
dir <- glue("{here()}")
source(glue("{dir}/scripts/misc/paths.R"))
source(glue("{dir}/scripts/misc/BIN.R"))
```

### Load data
```{r}
base_dir <- glue("{proj_dir}/data/{stamp}/processed/flex/{sample}")
sce <- qread(glue("{base_dir}/proc_sce.qs"), nthreads = 8)
sce
```

# Viz batch effect

## PC space
```{r}
sce$sample <- factor(sce$sample, levels = c("iESC_0h","iESC_6h","iESC_12h","iESC_24h"))
df <- as.data.frame(colData(sce))
um <- reducedDim(sce,"PCA")
df <- cbind(df,um)
df <- df[sample(nrow(df)), ]

pal <- Polychrome::createPalette(n_distinct(sce$sample), c("#fc6060", "#74f774", "#7c7cfc")) # palette
names(pal) <- unique(sce$sample)

ggplot(df, aes(x = PC1, y = PC2, color = sample)) +
  ggrastr::rasterise(geom_point(shape = 16, size = 0.2), dpi = 1000) +
  scale_color_manual(values = pal) +
  theme_bw() +
  theme(
    text = element_text(size = 15, color = "black"),
    axis.text = element_text(size = 10, color = "black"),
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank()   # Remove minor grid lines
  ) +
  guides(color = guide_legend(override.aes = list(size = 3))) +
  labs(x = "PC1", y = "PC2", color = "Sample")
```

## UMAP
```{r}
df <- as.data.frame(colData(sce))
um <- reducedDim(sce,"UMAP")
df <- cbind(df,um)
df <- df[sample(nrow(df)), ]

ggplot(df, aes(x = UMAP1, y = UMAP2, color = sample)) +
  ggrastr::rasterise(geom_point(shape = 16, size = 0.2), dpi = 1000) +
  scale_color_manual(values = pal) +
  theme_bw() +
  theme(
    text = element_text(size = 15, color = "black"),
    axis.text = element_text(size = 10, color = "black"),
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank()   # Remove minor grid lines
  ) +
  guides(color = guide_legend(override.aes = list(size = 3))) +
  labs(x = "umap_1", y = "umap_2", color = "Sample")
```

# Clustering

## Build snn graph
```{r}
snn <- buildSNNGraph(sce, type = "jaccard", k = 5, use.dimred="PCA", BPPARAM = bp)
```

## Run louvain 
```{r}
clusters <- igraph::cluster_louvain(snn, resolution = 0.4)
```

```{r}
sce$label <- as.character(clusters$membership) # assign labels
pal <- Polychrome::createPalette(n_distinct(sce$label), c("#fc6060", "#74f774", "#7c7cfc")) # palette
names(pal) <- unique(sce$label)
```

## Silhouette plot
```{r}
sil.approx <- approxSilhouette(reducedDim(sce, "PCA"), clusters= sce$label)
sil.data <- as.data.frame(sil.approx)
sil.data$closest <- factor(ifelse(sil.data$width > 0, sce$label, sil.data$other))
sil.data$cluster <- sce$label
ggplot(sil.data, aes(x=cluster, y=width, colour=closest)) +
    ggbeeswarm::geom_quasirandom(method="smiley", size = 0.8, shape = 16) + 
  scale_color_manual(values = pal) +
  theme(
    text = element_text(size = 15, color = "black"),
    axis.text = element_text(size = 10, color = "black")
  ) +
  guides(color = guide_legend(override.aes = list(size = 3)))
```

## Clusters in Umap
```{r, fig.width= 8, fig.height= 5}
df <- as.data.frame(colData(sce))
um <- reducedDim(sce,"UMAP")
df <- cbind(df,um)
df <- df[sample(nrow(df)), ]

df$label <- factor(df$label, levels = sort(as.numeric(unique(df$label))))

ggplot(df, aes(x = UMAP1, y = UMAP2, color = label)) +
  ggrastr::rasterise(geom_point(shape = 16, size = 0.1), dpi = 1000) +
  scale_color_manual(values = pal) +
  theme_bw() +
  theme(
    text = element_text(size = 15, color = "black"),
    axis.text = element_text(size = 10, color = "black"),
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank()   # Remove minor grid lines
  ) +
  guides(color = guide_legend(override.aes = list(size = 3))) +
  labs(x = "umap1", y = "umap2", color = "Cluster")
```

## Clusters numbers

```{r}
df <- as.data.frame(colData(sce))
df <- as.data.frame(table(df$label))  %>%
        mutate(pct = round(Freq/sum(Freq),2))
df$Var1 <- factor(df$Var1, levels = df$Var1[order(-df$Freq)])

ggplot(df, aes(x = Var1, y = Freq, fill = Var1)) + 
  geom_col() + 
  geom_text(aes(label = Freq), vjust = -0.5, size = 3) +
  scale_fill_manual(values = pal) + 
  theme_bw() +
  theme(text = element_text(size = 15, color = "black"),
        axis.text = element_text(size = 10, color = "black")) +
  labs(x = "Cluster", y = "nCells", fill = "Cluster")
```

## QC metrics per cluster

```{r}
df <- as.data.frame(colData(sce))

# reorder by mean ncount
df$label <- factor(df$label, levels = df %>% 
  group_by(label) %>% 
  summarise(mean_sum = mean(sum)) %>% 
  arrange(-mean_sum) %>% 
  pull(label))

# Create the plot
ggplot(df, aes(x = label, y = sum)) + 
  geom_jitter(shape = 16, alpha = 0.8, size = 0.8, aes(color = log(detected))) +
  geom_boxplot(alpha = 0.8, outlier.shape = NA, fill = NA) +
  scale_color_gradient(low = "navy", high = "gold4") + 
  labs(x = "Cluster", y = "nCount", color = "Log(nFeature)") + 
  theme_bw() +
  theme(text = element_text(size = 15, color = "black"),
        axis.text = element_text(size = 10, color = "black"))
```

## Viz top HVGs
```{r}
hvg <- metadata(sce)[grep("^hvg_", names(metadata(sce)))]
hvg <- unique(unlist(lapply(hvg, function(x) x[1:20])))

plotHeatmap(sce, features = hvg,
            center = TRUE, colour_columns_by = "label", 
            order_columns_by = "label",
            treeheight_row = 0, treeheight_col = 0,
            main = "Top 20 HVGs")
```

## Viz Doublets 

### Proportions/Cluster
```{r}
df <- as.data.frame(colData(sce))
df <- as.data.frame(table(df$label, df$scDblFinder.class))
# Calculate the percentage and reorder by 'singlet' percentage
df <- df %>%
  group_by(Var1) %>%
  mutate(pct = round(Freq / sum(Freq), 2)) %>%
  ungroup()

# Calculate the percentage of 'singlets' for reordering
singlet_pct <- df %>% 
  filter(Var2 == "singlet") %>% 
  select(Var1, pct)

# Reorder Var1 by the percentage of 'singlets'
df$Var1 <- factor(df$Var1, levels = singlet_pct$Var1[order(singlet_pct$pct, decreasing = TRUE)])

# Make Var2 a factor to control the order in the legend and plot
df$Var2 <- factor(df$Var2, levels = c("doublet", "singlet"))

# Create the plot
ggplot(df, aes(x = Var1, y = pct, fill = Var2)) +
  scale_fill_manual(values = c("singlet" = "green4", "doublet" = "red4")) +
  geom_col(position = "stack") + 
  labs(x = "Cluster", y = "%", fill = "scDblFinder", title = "Doublets % per Cluster") + 
  theme_bw() +
  theme(text = element_text(size = 15, color = "black"),
        axis.text = element_text(size = 10, color = "black")) + 
  guides(color = guide_legend(override.aes = list(size = 3)))
```

### UMAP
```{r, fig.width= 15, fig.height= 5}
df <- as.data.frame(colData(sce))
um <- reducedDim(sce,"UMAP")
df <- cbind(df,um)
df <- df[sample(nrow(df)), ]

df$label <- factor(df$label, levels = sort(as.numeric(unique(df$label))))

pal <- Polychrome::createPalette(n_distinct(sce$label), c("#fc6060", "#74f774", "#7c7cfc")) # palette
names(pal) <- unique(sce$label)

wrap_plots(
ggplot(df, aes(x = UMAP1, y = UMAP2, color = label)) +
  ggrastr::rasterise(geom_point(shape = 16, size = 0.1), dpi = 1000) +
  scale_color_manual(values = pal) +
  theme_bw() +
  theme(
    text = element_text(size = 15, color = "black"),
    axis.text = element_text(size = 10, color = "black"),
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank()   # Remove minor grid lines
  ) +
  guides(color = guide_legend(override.aes = list(size = 3))) +
  labs(x = "umap1", y = "umap2", color = "Cluster"),

ggplot(df, aes(x = UMAP1, y = UMAP2, color = scDblFinder.class)) +
  ggrastr::rasterise(geom_point(shape = 16, size = 0.1), dpi = 1000) +
  scale_color_manual(values = c("singlet" = "darkgrey", "doublet" = "red4")) +
  theme_bw() +
  theme(
    text = element_text(size = 15, color = "black"),
    axis.text = element_text(size = 10, color = "black"),
    panel.grid.major = element_blank(),  # Remove major grid lines
    panel.grid.minor = element_blank()   # Remove minor grid lines
  ) +
  guides(color = guide_legend(override.aes = list(size = 3))) +
  labs(x = "umap1", y = "umap2", color = "scDblFinder"),
ncol = 2)
```

# Save data
```{r}
outdir <- glue("{proj_dir}/data/{stamp}/processed/flex/{sample}")
dir.create(outdir, showWarnings = F, recursive = T)
qsave(sce, glue("{outdir}/clust_sce.qs"), nthreads = 8)
```