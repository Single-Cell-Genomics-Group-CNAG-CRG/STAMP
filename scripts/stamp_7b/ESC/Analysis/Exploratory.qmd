---
title: "Exploratory analysis - Stamp 7b - ESCs"
subtitle: "Emanuele Pitino"
date: "`r Sys.Date()`"
format: 
  html:
    theme: superhero
    smooth-scroll: true
    code-fold: true
    self-contained: true
    toc: true
    toc_float: 
      collapsed: false
      smooth_scroll: true
editor: source
editor_options: 
  chunk_output_type: console
execute:
  echo: true
  fig-width: 16     
  fig-height: 12 
---
## Packages

```{r}
suppressPackageStartupMessages({
  library(SingleCellExperiment)
  library(tidyverse)
  library(dplyr)
  library(here)
  library(scater)
  library(glue)
  library(qs)
})
```

## Data loading

```{r}
stamp <- "stamp_7b"
sample <- "iESC"
dir <- glue("{here()}")
source(glue("{dir}/scripts/misc/paths.R"))
source(glue("{dir}/scripts/misc/BIN.R"))

res_dir <- glue("{proj_dir}/data/{stamp}/{sample}")
sce <- qread(glue("{res_dir}/PreProcNew.qs"), nthreads = 8)
sce 
```

## Slide layout

```{r}
df <- as.data.frame(colData(sce))

 ggplot(df, aes(x = CenterX_global_px, y = CenterY_global_px, color = sample)) + 
  scale_color_brewer(palette = "Set2") +
  ggrastr::rasterise(geom_point(size = 0.1, shape = 16), dpi = 600) +
  theme_bw() + 
  theme(panel.grid = element_blank(), text = element_text(colour = "black", size = 20), 
        axis.text = element_text(colour = "black", size = 15)) +
  labs(x = "x_px", y = "y_px") +
  guides(color = guide_legend(override.aes = list(size = 4))) +
   coord_equal()
```

## Cell numbers

```{r}
df <- as.data.frame(table(sce$sample)) %>%
  mutate(Proportion = round((Freq / sum(Freq)) * 100, 2))

ggplot(df, aes(x = Var1, y = Freq)) + 
  geom_col(aes(fill = Var1)) +
  geom_text(aes(label = Freq), vjust = -0.5, size = 5) +
  scale_fill_brewer(palette = "Set2")  + 
  theme_bw() +
  theme(text = element_text(size = 15, color = "black"),
        axis.text = element_text(size = 10, color = "black"),
        panel.grid = element_blank(),
        axis.text.x = element_text(angle = 45, hjust = 1)) +
  labs(fill = "Sample", y = "# Cells")
```

## Counts/Features/Cell Area per time-point

```{r}
df <- as.data.frame(colData(sce))
plot_metrics <- function(data, color_var) {
  ggplot(data, aes(x = CenterX_global_px, y = CenterY_global_px, color = (.data[[color_var]]))) + 
  scale_color_gradientn(colors  = c("gold","navy")) +
  ggrastr::rasterise(geom_point(size = 0.1, shape = 16), dpi = 600) +
  theme_bw() + 
  theme(panel.grid = element_blank(), text = element_text(colour = "black", size = 20), 
        axis.text = element_text(colour = "black", size = 15)) +
  labs(x = "x_px", y = "y_px") +
  coord_equal()
}
```

### Counts

```{r}
gg_spat_counts <- plot_metrics(df, "nCount_RNA")
gg_spat_counts
```

### Features

```{r}
gg_spat_feat <- plot_metrics(df, "nFeature_RNA")
gg_spat_feat
```

### Area

```{r}
gg_spat_area <- plot_metrics(df, "Area.um2")
gg_spat_area
```

## Boxplots

```{r}
# Define a custom function for creating the boxplots
create_boxplot <- function(y_var) {
  ggplot(df, aes(x = sample, y = .data[[y_var]], fill = sample, color = sample)) + 
    geom_boxplot(alpha = 0.3, lwd = 0.6) + 
    scale_fill_brewer(palette = "Set2") + 
    scale_color_brewer(palette = "Set2") + 
    theme_bw() + 
    scale_y_log10() + 
    theme(text = element_text(size = 15, color = "black"),
          axis.text = element_text(size = 10, color = "black"),
          panel.grid = element_blank(),
          axis.text.x = element_text(angle = 45, hjust = 1))
}
# Combine the plots
wrap_plots(create_boxplot("nCount_RNA"),create_boxplot("nFeature_RNA"),
           create_boxplot("Area.um2"),ncol = 3) + 
plot_layout(guides = "collect", axis_titles = "collect") + 
plot_annotation(title = glue("{stamp} - {sample}"),
                theme = theme(plot.title = element_text(size = 20, face = "bold")))
```

## PCA time-point

```{r}
sce <- sce[, sample(ncol(sce))] # shuffle rows by sample
ggrastr::rasterise(plotReducedDim(sce,"PCA", color_by = "sample",point_size = 0.01,
               scattermore = F, rasterise = F) +
    scale_color_brewer(palette = "Set2") + 
    guides(color = guide_legend(override.aes = list(alpha = 1, size = 4))) +
    labs(color = "Sample"),
  dpi = 800)
```

## UMAP time-point

```{r}
ggrastr::rasterise(plotReducedDim(sce,"UMAP", color_by = "sample",point_size = 0.01,
               scattermore = F, rasterise = F) +
    scale_color_brewer(palette = "Set2") + 
    guides(color = guide_legend(override.aes = list(alpha = 1, size = 4))) +
    labs(color = "Sample"),
  dpi = 800)
```

## Pseudo-bulking time-points

```{r}
counts <- counts(sce)
colnames(counts) <- colData(sce)$sample[match(colnames(sce), rownames(colData(sce)))]
# Sum by columns with the same names
agg <- sapply(unique(colnames(counts)), function(name) {
  rowSums(counts[, colnames(counts) == name, drop = FALSE])
})
cd <- data.frame(sample = colnames(agg))
sc <- SingleCellExperiment(assay = list(counts = as.matrix(agg)),
                           colData = data.frame(sample = colnames(agg)))
sc <- logNormCounts(sc)
# run MDS
sc <- runMDS(
    sc,
    ncomponents = 2,
    exprs_values = "logcounts",
    ntop = 500,
    subset_row = NULL,
    scale = FALSE,
    method = "euclidean",
    name = "MDS_counts"
)
# Plot
md_c <- as.data.frame(reducedDim(sc,"MDS_counts")) %>%
        mutate(sample = rownames(.))
md_c$sample <- factor(md_c$sample, levels = c("iESC_0h","iESC_6h","iESC_12h","iESC_24h",
                                          "iESC_48h","iESC_72h","iESC_96h","iESC_120h"))

ggplot(md_c, aes(x = V1, y = V2, color = sample)) + 
  geom_point(size = 3) + 
  geom_text(aes(label = sample), vjust = -1, hjust = 0.5, size = 4) + 
  scale_color_brewer(palette = "Set2") + 
  theme_bw()  + 
  theme(text = element_text(size = 15, color = "black"),
          axis.text = element_text(size = 10, color = "black"),
          panel.grid = element_blank(),
        title = element_text(size = 20, face = "bold")) +
  labs(title = glue("MDS - {stamp} - {sample}"), x = "MDS1", y = "MDS2") +
  coord_equal() 
```

### SessionInfo
```{r}
sessionInfo()
```

